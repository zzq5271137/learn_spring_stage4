<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        AOP:
        在软件业，AOP为Aspect Oriented Programming的缩写, 意为: 面向切面编程;
        通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术;
        AOP是OOP的延续, 是软件开发中的一个热点, 也是Spring框架中的一个重要内容, 是函数式编程的一种衍生范型;
        利用AOP可以对业务逻辑的各个部分进行隔离, 从而使得业务逻辑各部分之间的耦合度降低, 提高程序的可重用性, 同时提高了开发的效率;

        AOP相关术语:
        1. Joinpoint: 连接点
	       可以被拦截到的方法;
	       能够被增强的方法, 这些方法就可以称为是连接点;
	    2. Pointcut: 切入点
	       真正被拦截的方法;
	       真正被增加的方法;
	    3. Advice: 通知
	       增加的内容, 通常都是封装成一个方法, 这个方法我们就称为通知;
	    4. Introduction: 引介
           类层面的增加;
           给原有的类添加一些新的属性方法;
           在开发中通常都是给方法进行增加;
        5. Target: 被增加的对象
	    6. Weaving: 织入
	       将通知应用到目标对象的过程
	    7. Proxy: 代理对象
	    8. Aspect: 切面
	       多个通知和多个切入点的集合
    -->

    <bean id="customerDao" class="com.mycomp.spring.demo3.CustomerDaoImpl"/>

    <!--
        SpringAOP的配置
    -->
    <!-- 把切面交给spring来管理 -->
    <bean id="myAspect" class="com.mycomp.spring.demo3.MyAspect"/>
    <!-- AOP的配置 -->
    <aop:config>
        <!-- 配置切入点: 给哪个方法进行增强 -->
        <aop:pointcut id="savePoint"
                      expression="execution(* com.mycomp.spring.demo3.CustomerDaoImpl.save(..))"/>
        <aop:pointcut id="updatePoint"
                      expression="execution(* com.mycomp.spring.demo3.CustomerDaoImpl.update(..))"/>
        <aop:pointcut id="deletePoint"
                      expression="execution(* com.mycomp.spring.demo3.CustomerDaoImpl.delete(..))"/>
        <aop:pointcut id="findPoint"
                      expression="execution(* com.mycomp.spring.demo3.CustomerDaoImpl.find(..))"/>
        <!-- 配置切面: 增强的功能是什么 -->
        <aop:aspect ref="myAspect">
            <!-- 前置通知: 在目标方法执行之前增强(before) -->
            <aop:before method="check" pointcut-ref="savePoint"/>

            <!-- 后置通知: 在目标方法执行之后增强(after-returning), 它能够获取切入点的返回值(returning) -->
            <aop:after-returning method="log" pointcut-ref="updatePoint" returning="res"/>

            <!-- 环绕通知: 在目标方法执行之前和之后都进行操作(around), 它可以阻止目标方法的执行 -->
            <aop:around method="aroundMethod" pointcut-ref="deletePoint"/>

            <!-- 异常抛出通知: 当程序出现异常时才会触发这个通知(after-throwing) -->
            <aop:after-throwing method="exceptionMethod" pointcut-ref="findPoint" throwing="ex"/>

            <!-- 最终通知: 无论代码有没有异常, 都会执行这个通知(after), 也就是无论什么情况, 最终都会执行这个通知 -->
            <aop:after method="afterMethod" pointcut-ref="findPoint"/>

        </aop:aspect>
    </aop:config>

    <!-- 开启AOP注解 -->
    <aop:aspectj-autoproxy/>
    <bean id="personDao" class="com.mycomp.spring.demo4.PersonDaoImpl"/>
    <bean id="personDaoAspect" class="com.mycomp.spring.demo4.PersonDaoAspect"/>
</beans>
